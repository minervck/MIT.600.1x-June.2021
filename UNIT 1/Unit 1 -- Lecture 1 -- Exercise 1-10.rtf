{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17420\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 LECTURE 1 \'97- Introduction to Python\

\f1\b0\fs22 \ulnone \
\

\f2\i\b Exercise #1\

\f1\i0\b0 \
1. 	What is the difference between an Algorithm and a Program?\
		An algorithm is a conceptual idea, a program is a concrete instantiation of an algorithm.\
\
2. 	A computational mode of thinking means that everything can be viewed as a math problem involving numbers and formulas.\
		True\
\
3. 	Computer Science is the study of how to build efficient machines that run programs.\
		False\
\
4. 	The two things every computer can do are:\
		Perform calculations\
		Remember the results\
\
\
\pard\pardeftab720\partightenfactor0

\f2\i\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Exercise #2\
\pard\pardeftab720\partightenfactor0

\f1\i0\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
1. 	Declarative knowledge refers to statements of fact.\
		True\
\
2. 	Imperative knowledge refers to 'how to' methods.\
		True\
\
3. 	A recipe for deducing the square root involves guessing a starting value for y. Without another recipe to be told how to pick a starting number, the computer cannot generate one on its own.\
		True\
\
\
\pard\pardeftab720\partightenfactor0

\f2\i\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Exercise #3\
\pard\pardeftab720\partightenfactor0

\f1\i0\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
1. 	A stored program computer is designed to compute precisely one computation, such as a square root, or the trajectory of a missile.\
		False\
\
2. 	A fixed program computer is designed to run any computation, by interpreting a sequence of program instructions that are read into it.\
		False\
\
3. 	A program counter\
		points the computer to the next instruction to execute in the program.\
\
4. 	What does it mean when we say that "the computer walks through the sequence executing some computation"?\
		The computer executes the instructions mostly in a linear sequence, except sometimes it jumps to a different place in the sequence.\
\
5. 	In order to compute everything that is computable, every computer must be able to handle the sixteen most primitive operations.\
		False\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0

\f2\i\b \cf2 Exercise #4\
\pard\pardeftab720\partightenfactor0

\f1\i0\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 Choose the term described by each of the following definitions.\
\
1. 	Determines whether a string is legal\
		Syntax\
\
2. 	Determines whether a string has meaning\
		Static semantics\
\
3. 	Assigns a meaning to a legal sentence\
		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 Semantics\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f2\i\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Exercise #5
\f1\i0\b0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For each of the following expressions, indicate the type of the expression.\
\
1. 	3.14\
		float\
\
2. 	-34\
		int\
\
3. 	True\
		bool\
\
4. 	None\
		NoneType\
\
5. 	3.0\
		float\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\pard\pardeftab720\partightenfactor0

\f2\i\b \cf2 Exercise #6\
\pard\pardeftab720\partightenfactor0

\f1\i0\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For each of the following expressions, indicate the value returned, or if the evaluation would lead to an error, write the word 'error' (note this is a word, not a string, no quotes).\
\
For decimal answers, give the full result, or four decimal places of accuracy (whichever is shortest).\uc0\u8232 \
1.	6 + 12 -3\
		15\
\
2.	2 * 3.0\
		6.0\
3.	- - 4\
		4\
4.	10/3\
		3.3333\
\
5.	10.0/3.0\
		3.3333\
\
6.	(2 + 3) * 4\
		20\
\
7.	2 + 3 * 4\
		14\
\
8.	2**3 + 1\
		9\
\
9.	2.1 ** 2.0\
		4.41\
\
10.	2.2 * 3.0\
		6.6\
\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f3\i \cf2 Exercise #7\
\pard\pardeftab720\partightenfactor0

\f1\i0 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Below is a transcript of a session with the Python shell. For each expression being evaluated, provide the type and the value the expression returns. If evaluating an expression would cause an error, select 'NoneType' and write the word 'error' (note this is a word, not a string, no quotes) in the box.\
\uc0\u8232 Assume that the expressions are evaluated in the order shown - that is, each problem part is evaluated directly after the previous problem part(s).\
\uc0\u8232 1.	>>> a = 3\
	>>> a + 2.0 \
		float\
		5.0\
\
2.	>>> a = a + 1.0\
	>>> a \
		float\
		4.0\
\
3.	>>> a = 3\
	>>> b\
		NoneType\
		error\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\pard\pardeftab720\partightenfactor0

\f3\i \cf2 Exercise #8\
\pard\pardeftab720\partightenfactor0

\f1\i0 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For each of the following expressions, indicate the value returned, or if the evaluation would lead to an error, write the word 'error' (note this is a word, not a string, no quotes).\
\
1.	3 > 4\
		False\
\
2.	4.0 > 3.999\
		True\
\
3.	4 > 4\
		False\
\
4.	4 > + 4\
		False\
\
5.	2 + 2 == 4\
		True\
\
6.	True or False\
		True\
\
7.	False or False\
		False\
\
8.	not False\
		True\
\
9.	3.0 - 1.0 != 5.0 - 3.0\
		False\
\
10.	3 > 4 or (2 < 3 and 9 > 10)\
		False\
\
11.	4 > 5 or 3 < 4 and 9 > 8\
		True\
\
14.	not(4 > 3 and 100 > 6)\
		False\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f3\i \cf2 Exercise #9\
\pard\pardeftab720\partightenfactor0

\f1\i0 \cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Below is a transcript of a session with the Python shell. For each expression being evaluated, provide the type and the value that the last expression in the transcript returns. If evaluating an expression would cause an error, select 'NoneType' and write the word 'error' (note this is a word, not a string, no quotes) in the box.\uc0\u8232 \
Assume that the expressions are evaluated in the order shown - that is, each problem part is evaluated directly after the previous problem part(s).\
\uc0\u8232 1.	>>> a = 3\
	>>> a == 5.0\
	>>> a \
		int\
		3\
\
2.	>>> b = 10\
	>>> c = b > 9\
	>>> c \
		bool\
		True\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\pard\pardeftab720\partightenfactor0

\f3\i \cf2 Exercise #10\
\pard\pardeftab720\partightenfactor0

\f1\i0 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For each of the following expressions, indicate the type of the expression and the value returned, or, if the evaluation would lead to an error, choose the type 'NoneType' and write the word 'error' (note this is a word, not a string, no quotes) as the value returned.\
\
1.	3 + 5.0\
		float\
		8.0\
\
2.	5/2\
		float\
		2.5\
\
3.	5/2 == 5/2.0\
		bool \
		True \
\
4.	5/2.0\
		float\
		2.5\
\
5.	round(2.6)\
		int\
		3\
\
6.	int(2.6)\
		int \
		2 \
\
7.	2.0 + 5.0\
		float\
		7.0\
\
8.	5*2 == 5.0 * 2.0\
		bool \
		True}